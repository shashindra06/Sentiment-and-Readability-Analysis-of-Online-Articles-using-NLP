Title: Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation | Blackcoffer Insights

Our Success Stories

Banking Securities, and Insurance
Energy
Entertainment
Fast Moving Consumer Goods
Government & Think Tanks
Healthcare
Infrastructure & Real Estate
IT
Lifestyle & eCommerce
Production & manufacturing
Research & Academia
Retail & Supply Chain
Telecom


What We Do

Banking, Financials, Securities, and Insurance
Energy
Entertainment
Fast Moving Consumer Goods
Government & Think Tanks
Healthcare
Hospitality
Infrastructure & Real Estate
IT Services
Lifestyle, eCommerce & Online Market Place
News & Media
Production & Manufacturing
Research & Academia
Retail & Supply Chain


What We Think

Automobiles & Components
BFSI
Asset and Portfolio
Banks
Capital Markets
Derivatives and Securities
Diversified Financials
Finance & Accounting
Insurance
Securities and Capital Markets
Capital Goods
Commercial & Professional Services
Consumer Discretionary
Consumer Durables & Apparel
Consumer Services
Consumer Staples
Food & Staples Retailing
Food, Beverage & Tobacco
Household & Personal Products
Data Science
Analytics
Artificial Intelligence
Big Data
Business Analytics
Data Visualization
Internet of Things
Machine Learning
Statistics
Energy
DataOil


How To

Analytics
Application Development
Artificial Intelligence
Business Analytics
Example
Optimization
Projects
Software Development
Source Code Audit
Statistics
Web & Mobile App Development


Schedule Demo
Contact
 


FacebookLinkedinTwitterYoutube



 






Our Success Stories  

Transforming Real Estate Investments with an Automated Stack shares Platform


March 13, 2025 







Our Success Stories  

Empowering Careers: The Hirekingdom


March 13, 2025 







Our Success Stories  

Integrating Machine Learning Code into Kubeflow Pipeline – Kuberflow MLOps Kubernetes


October 24, 2024 







Our Success Stories  

Facial Recognition Attendance System


October 18, 2024 







What We Do  

AI audio and text conversational bot using livekit


November 30, 2024 







What We Do  

AI Receptionist | Voice Call Center | AI Lawyer | AI Sales Representative | AI Representative | AI Doctor | AI Coach | AI...


November 21, 2024 







What We Do  

Face Recognition with Deepfills Framework – Deepface


October 18, 2024 







What We Do  

Development of EA Robot for Automated Trading


September 15, 2024 







Utilities  

The Ultimate Collection of Multimedia Tools for Video Editing & Screen Recording (2024 Edition)


March 22, 2025 







What We Think  

Rising IT cities and its impact on the economy, environment, infrastructure, and city life by the year 2040.


August 24, 2023 







What We Think  

Rising IT Cities and Their Impact on the Economy, Environment, Infrastructure, and City Life in Future


August 18, 2023 







What We Think  

Internet Demand’s Evolution, Communication Impact, and 2035’s Alternative Pathways


August 18, 2023 







How To  

AI tools for mechanical engineering, categorized based on their applications


March 24, 2025 







How To  

Civil engineering AI Tools and Software


March 24, 2025 







How To  

AI tools and software for Electrical Engineering, categorized based on their applications


March 24, 2025 







How To  

Chemical engineering AI Tools & AI Software


March 24, 2025 






Home  Our Success Stories  Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation





Our Success StoriesFast Moving Consumer GoodsLifestyle & eCommerceRetail & Supply Chain

Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation

By Ajay Bidyarthy -   July 21, 2023  8661 





Client BackgroundClient: A leading tech firm in NewzealandIndustry Type:  RetailServices: Retail businessOrganization Size: 100+Project ObjectiveBrodie Johnco had a MongoDB Database that he wanted to connect to a Power BI Dashboard. However, ODBC connectors were not working for his level of subscription, so he needed a cheaper workaround.Project DescriptionBrodie Johnco had a MongoDB Database containing a large amount of data that he wanted to visualize in a Power BI Dashboard. He initially tried to use ODBC connectors to connect his database to Power BI, but ran into issues due to his level of subscription. We were brought in to help find a cheaper workaround.Our solution involved using Python to extract the relevant data from Brodie’s MongoDB Database. We used the Pandas library to create Dataframes, which we then uploaded to Azure Blob Storage as tables. We set up an Azure pipeline that ran a Python script every 30 minutes to update the tables with new data from the database.Our Solution We used Brodie’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added them as tables to Azure Blob Storage and set up a Python script to an Azure pipeline that refreshed every 30 minutes. This allowed us to keep the data in sync and provide Brodie with up-to-date information for his Power BI Dashboard.Project DeliverablesThe final deliverable was a readable CSV file that contained the converted data from the original JSON format.Tools usedJupyter Notebook, Google Colab, Power BI, MongoDB Compass, Microsoft Excel, Azure Blob StorageLanguage/techniques usedPython, Pandas, Azure Cloud StorageSkills usedPython programming, Azure Cloud Storage, data extraction and manipulationDatabases usedMongoDB DatabaseWeb Cloud Servers usedAzure Blob StorageWhat are the technical Challenges Faced during Project ExecutionThe main challenge we faced was finding a way to connect Brodie’s MongoDB Database to his Power BI Dashboard without using ODBC connectors. We overcame this challenge by using Python and Azure Blob Storage to extract and store the relevant data.How the Technical Challenges were SolvedWe solved the issue by using the client’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added these dataframes as tables to Azure Blob Storage and set the Python script to an Azure pipeline that refreshed every 30 minutes. This allowed the client to access the data in Power BI without the need for ODBC connectors.Business ImpactOur solution allowed Brodie to visualize his data in a Power BI Dashboard without having to pay for expensive ODBC connectors. The Azure Blob Storage solution we implemented was much more cost-effective and provided him with up-to-date information every 30 minutes.Project website urlhttps://github.com/AjayBidyarthy/Brodie-Johnco 

 

  
Previous articleData TransformationNext articleBuilding a Physics-Informed Neural Network for Circuit Evaluation Ajay Bidyarthy  
 


 







 
 


Home  Our Success Stories  Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation





Our Success StoriesFast Moving Consumer GoodsLifestyle & eCommerceRetail & Supply Chain

Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation

By Ajay Bidyarthy -   July 21, 2023  8661 





Client BackgroundClient: A leading tech firm in NewzealandIndustry Type:  RetailServices: Retail businessOrganization Size: 100+Project ObjectiveBrodie Johnco had a MongoDB Database that he wanted to connect to a Power BI Dashboard. However, ODBC connectors were not working for his level of subscription, so he needed a cheaper workaround.Project DescriptionBrodie Johnco had a MongoDB Database containing a large amount of data that he wanted to visualize in a Power BI Dashboard. He initially tried to use ODBC connectors to connect his database to Power BI, but ran into issues due to his level of subscription. We were brought in to help find a cheaper workaround.Our solution involved using Python to extract the relevant data from Brodie’s MongoDB Database. We used the Pandas library to create Dataframes, which we then uploaded to Azure Blob Storage as tables. We set up an Azure pipeline that ran a Python script every 30 minutes to update the tables with new data from the database.Our Solution We used Brodie’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added them as tables to Azure Blob Storage and set up a Python script to an Azure pipeline that refreshed every 30 minutes. This allowed us to keep the data in sync and provide Brodie with up-to-date information for his Power BI Dashboard.Project DeliverablesThe final deliverable was a readable CSV file that contained the converted data from the original JSON format.Tools usedJupyter Notebook, Google Colab, Power BI, MongoDB Compass, Microsoft Excel, Azure Blob StorageLanguage/techniques usedPython, Pandas, Azure Cloud StorageSkills usedPython programming, Azure Cloud Storage, data extraction and manipulationDatabases usedMongoDB DatabaseWeb Cloud Servers usedAzure Blob StorageWhat are the technical Challenges Faced during Project ExecutionThe main challenge we faced was finding a way to connect Brodie’s MongoDB Database to his Power BI Dashboard without using ODBC connectors. We overcame this challenge by using Python and Azure Blob Storage to extract and store the relevant data.How the Technical Challenges were SolvedWe solved the issue by using the client’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added these dataframes as tables to Azure Blob Storage and set the Python script to an Azure pipeline that refreshed every 30 minutes. This allowed the client to access the data in Power BI without the need for ODBC connectors.Business ImpactOur solution allowed Brodie to visualize his data in a Power BI Dashboard without having to pay for expensive ODBC connectors. The Azure Blob Storage solution we implemented was much more cost-effective and provided him with up-to-date information every 30 minutes.Project website urlhttps://github.com/AjayBidyarthy/Brodie-Johnco 

 

  
Previous articleData TransformationNext articleBuilding a Physics-Informed Neural Network for Circuit Evaluation Ajay Bidyarthy  
 


 







 





Our Success StoriesFast Moving Consumer GoodsLifestyle & eCommerceRetail & Supply Chain

Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation

By Ajay Bidyarthy -   July 21, 2023  8661 





Client BackgroundClient: A leading tech firm in NewzealandIndustry Type:  RetailServices: Retail businessOrganization Size: 100+Project ObjectiveBrodie Johnco had a MongoDB Database that he wanted to connect to a Power BI Dashboard. However, ODBC connectors were not working for his level of subscription, so he needed a cheaper workaround.Project DescriptionBrodie Johnco had a MongoDB Database containing a large amount of data that he wanted to visualize in a Power BI Dashboard. He initially tried to use ODBC connectors to connect his database to Power BI, but ran into issues due to his level of subscription. We were brought in to help find a cheaper workaround.Our solution involved using Python to extract the relevant data from Brodie’s MongoDB Database. We used the Pandas library to create Dataframes, which we then uploaded to Azure Blob Storage as tables. We set up an Azure pipeline that ran a Python script every 30 minutes to update the tables with new data from the database.Our Solution We used Brodie’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added them as tables to Azure Blob Storage and set up a Python script to an Azure pipeline that refreshed every 30 minutes. This allowed us to keep the data in sync and provide Brodie with up-to-date information for his Power BI Dashboard.Project DeliverablesThe final deliverable was a readable CSV file that contained the converted data from the original JSON format.Tools usedJupyter Notebook, Google Colab, Power BI, MongoDB Compass, Microsoft Excel, Azure Blob StorageLanguage/techniques usedPython, Pandas, Azure Cloud StorageSkills usedPython programming, Azure Cloud Storage, data extraction and manipulationDatabases usedMongoDB DatabaseWeb Cloud Servers usedAzure Blob StorageWhat are the technical Challenges Faced during Project ExecutionThe main challenge we faced was finding a way to connect Brodie’s MongoDB Database to his Power BI Dashboard without using ODBC connectors. We overcame this challenge by using Python and Azure Blob Storage to extract and store the relevant data.How the Technical Challenges were SolvedWe solved the issue by using the client’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added these dataframes as tables to Azure Blob Storage and set the Python script to an Azure pipeline that refreshed every 30 minutes. This allowed the client to access the data in Power BI without the need for ODBC connectors.Business ImpactOur solution allowed Brodie to visualize his data in a Power BI Dashboard without having to pay for expensive ODBC connectors. The Azure Blob Storage solution we implemented was much more cost-effective and provided him with up-to-date information every 30 minutes.Project website urlhttps://github.com/AjayBidyarthy/Brodie-Johnco 

 

  
Previous articleData TransformationNext articleBuilding a Physics-Informed Neural Network for Circuit Evaluation Ajay Bidyarthy  
 


 





Our Success StoriesFast Moving Consumer GoodsLifestyle & eCommerceRetail & Supply Chain

Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation

By Ajay Bidyarthy -   July 21, 2023  8661 





Client BackgroundClient: A leading tech firm in NewzealandIndustry Type:  RetailServices: Retail businessOrganization Size: 100+Project ObjectiveBrodie Johnco had a MongoDB Database that he wanted to connect to a Power BI Dashboard. However, ODBC connectors were not working for his level of subscription, so he needed a cheaper workaround.Project DescriptionBrodie Johnco had a MongoDB Database containing a large amount of data that he wanted to visualize in a Power BI Dashboard. He initially tried to use ODBC connectors to connect his database to Power BI, but ran into issues due to his level of subscription. We were brought in to help find a cheaper workaround.Our solution involved using Python to extract the relevant data from Brodie’s MongoDB Database. We used the Pandas library to create Dataframes, which we then uploaded to Azure Blob Storage as tables. We set up an Azure pipeline that ran a Python script every 30 minutes to update the tables with new data from the database.Our Solution We used Brodie’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added them as tables to Azure Blob Storage and set up a Python script to an Azure pipeline that refreshed every 30 minutes. This allowed us to keep the data in sync and provide Brodie with up-to-date information for his Power BI Dashboard.Project DeliverablesThe final deliverable was a readable CSV file that contained the converted data from the original JSON format.Tools usedJupyter Notebook, Google Colab, Power BI, MongoDB Compass, Microsoft Excel, Azure Blob StorageLanguage/techniques usedPython, Pandas, Azure Cloud StorageSkills usedPython programming, Azure Cloud Storage, data extraction and manipulationDatabases usedMongoDB DatabaseWeb Cloud Servers usedAzure Blob StorageWhat are the technical Challenges Faced during Project ExecutionThe main challenge we faced was finding a way to connect Brodie’s MongoDB Database to his Power BI Dashboard without using ODBC connectors. We overcame this challenge by using Python and Azure Blob Storage to extract and store the relevant data.How the Technical Challenges were SolvedWe solved the issue by using the client’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added these dataframes as tables to Azure Blob Storage and set the Python script to an Azure pipeline that refreshed every 30 minutes. This allowed the client to access the data in Power BI without the need for ODBC connectors.Business ImpactOur solution allowed Brodie to visualize his data in a Power BI Dashboard without having to pay for expensive ODBC connectors. The Azure Blob Storage solution we implemented was much more cost-effective and provided him with up-to-date information every 30 minutes.Project website urlhttps://github.com/AjayBidyarthy/Brodie-Johnco 

 

  
Previous articleData TransformationNext articleBuilding a Physics-Informed Neural Network for Circuit Evaluation Ajay Bidyarthy  
 


 



Our Success StoriesFast Moving Consumer GoodsLifestyle & eCommerceRetail & Supply Chain

Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation

By Ajay Bidyarthy -   July 21, 2023  8661 





Client BackgroundClient: A leading tech firm in NewzealandIndustry Type:  RetailServices: Retail businessOrganization Size: 100+Project ObjectiveBrodie Johnco had a MongoDB Database that he wanted to connect to a Power BI Dashboard. However, ODBC connectors were not working for his level of subscription, so he needed a cheaper workaround.Project DescriptionBrodie Johnco had a MongoDB Database containing a large amount of data that he wanted to visualize in a Power BI Dashboard. He initially tried to use ODBC connectors to connect his database to Power BI, but ran into issues due to his level of subscription. We were brought in to help find a cheaper workaround.Our solution involved using Python to extract the relevant data from Brodie’s MongoDB Database. We used the Pandas library to create Dataframes, which we then uploaded to Azure Blob Storage as tables. We set up an Azure pipeline that ran a Python script every 30 minutes to update the tables with new data from the database.Our Solution We used Brodie’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added them as tables to Azure Blob Storage and set up a Python script to an Azure pipeline that refreshed every 30 minutes. This allowed us to keep the data in sync and provide Brodie with up-to-date information for his Power BI Dashboard.Project DeliverablesThe final deliverable was a readable CSV file that contained the converted data from the original JSON format.Tools usedJupyter Notebook, Google Colab, Power BI, MongoDB Compass, Microsoft Excel, Azure Blob StorageLanguage/techniques usedPython, Pandas, Azure Cloud StorageSkills usedPython programming, Azure Cloud Storage, data extraction and manipulationDatabases usedMongoDB DatabaseWeb Cloud Servers usedAzure Blob StorageWhat are the technical Challenges Faced during Project ExecutionThe main challenge we faced was finding a way to connect Brodie’s MongoDB Database to his Power BI Dashboard without using ODBC connectors. We overcame this challenge by using Python and Azure Blob Storage to extract and store the relevant data.How the Technical Challenges were SolvedWe solved the issue by using the client’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added these dataframes as tables to Azure Blob Storage and set the Python script to an Azure pipeline that refreshed every 30 minutes. This allowed the client to access the data in Power BI without the need for ODBC connectors.Business ImpactOur solution allowed Brodie to visualize his data in a Power BI Dashboard without having to pay for expensive ODBC connectors. The Azure Blob Storage solution we implemented was much more cost-effective and provided him with up-to-date information every 30 minutes.Project website urlhttps://github.com/AjayBidyarthy/Brodie-Johnco 

 

  
Previous articleData TransformationNext articleBuilding a Physics-Informed Neural Network for Circuit Evaluation Ajay Bidyarthy  


Our Success StoriesFast Moving Consumer GoodsLifestyle & eCommerceRetail & Supply Chain

Connecting MongoDB Database to Power BI Dashboard: Dashboard Automation

By Ajay Bidyarthy -   July 21, 2023  8661 


By Ajay Bidyarthy -  
8661



Client BackgroundClient: A leading tech firm in NewzealandIndustry Type:  RetailServices: Retail businessOrganization Size: 100+Project ObjectiveBrodie Johnco had a MongoDB Database that he wanted to connect to a Power BI Dashboard. However, ODBC connectors were not working for his level of subscription, so he needed a cheaper workaround.Project DescriptionBrodie Johnco had a MongoDB Database containing a large amount of data that he wanted to visualize in a Power BI Dashboard. He initially tried to use ODBC connectors to connect his database to Power BI, but ran into issues due to his level of subscription. We were brought in to help find a cheaper workaround.Our solution involved using Python to extract the relevant data from Brodie’s MongoDB Database. We used the Pandas library to create Dataframes, which we then uploaded to Azure Blob Storage as tables. We set up an Azure pipeline that ran a Python script every 30 minutes to update the tables with new data from the database.Our Solution We used Brodie’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added them as tables to Azure Blob Storage and set up a Python script to an Azure pipeline that refreshed every 30 minutes. This allowed us to keep the data in sync and provide Brodie with up-to-date information for his Power BI Dashboard.Project DeliverablesThe final deliverable was a readable CSV file that contained the converted data from the original JSON format.Tools usedJupyter Notebook, Google Colab, Power BI, MongoDB Compass, Microsoft Excel, Azure Blob StorageLanguage/techniques usedPython, Pandas, Azure Cloud StorageSkills usedPython programming, Azure Cloud Storage, data extraction and manipulationDatabases usedMongoDB DatabaseWeb Cloud Servers usedAzure Blob StorageWhat are the technical Challenges Faced during Project ExecutionThe main challenge we faced was finding a way to connect Brodie’s MongoDB Database to his Power BI Dashboard without using ODBC connectors. We overcame this challenge by using Python and Azure Blob Storage to extract and store the relevant data.How the Technical Challenges were SolvedWe solved the issue by using the client’s MongoDB Database keys to extract relevant Data Clusters as Pandas Dataframes. We then added these dataframes as tables to Azure Blob Storage and set the Python script to an Azure pipeline that refreshed every 30 minutes. This allowed the client to access the data in Power BI without the need for ODBC connectors.Business ImpactOur solution allowed Brodie to visualize his data in a Power BI Dashboard without having to pay for expensive ODBC connectors. The Azure Blob Storage solution we implemented was much more cost-effective and provided him with up-to-date information every 30 minutes.Project website urlhttps://github.com/AjayBidyarthy/Brodie-Johnco 


  
Previous articleData TransformationNext articleBuilding a Physics-Informed Neural Network for Circuit Evaluation
Previous articleData Transformation
Previous articleData Transformation
Next articleBuilding a Physics-Informed Neural Network for Circuit Evaluation
Next articleBuilding a Physics-Informed Neural Network for Circuit Evaluation



 

Review: Penalty Shoot Out de Evoplay en Casinos Online para México


June 7, 2025 







 

Disparo al Gol: Todo sobre el “Penalty Shoot Out” de Evoplay y los Casinos con Retiro Inmediato en México


June 7, 2025 







 

Penal Shoot Out de Evoplay: Un Juego que Captura la Emoción del Fútbol en Casinos Mexicanos


June 7, 2025 







 

Review: Penalty Shoot Out de Evoplay en Casinos Online para México


June 7, 2025 







 

Disparo al Gol: Todo sobre el “Penalty Shoot Out” de Evoplay y los Casinos con Retiro Inmediato en México


June 7, 2025 







 

Penal Shoot Out de Evoplay: Un Juego que Captura la Emoción del Fútbol en Casinos Mexicanos


June 7, 2025 







ABOUT US


FOLLOW US


FacebookLinkedinTwitterYoutube